Notes:

[ ] display and operate on nicknames

[ ] implement actual polymorphism for Frames
    Frame
        name
        nickname
    WordFrame : Frame
        type heirarchy
        word
    SyntaxFrame : Frame
        vector<PatternElement> pattern_elements
    ParsedSyntaxFrame : SyntaxFrame
        vector<pair<index, Frame>> matched_frames_by_index
    BinaryFrame : Frame
        PatternElement left
        PatternElement right
        +SyntaxFrame original_syntax_frame
    
    also
    PatternElement
        match_string
    CompletePatternElement : PatternElement
        true_match_type
        Necessity necessity
        vector<FeatureTag> feature_tags

[ ] match patterns on type heirarchy components. like 
    VP > AuxiliaryVerb Verb
       > have taken "i <have taken> to hunting"
    
    VP > Verb MeasureNoun
        >  the horse <drank water>
    
    VP > Pronoun Verb
        > <i eat> food for the taste
    
    NP > Pronoun Noun
        > the king rode upon <his horse>

[ ] actually use pattern necessity type (this will require extra nuances in binarize_grammar
    - reference to 'higher' production rules, and modification thereof. With maintenence of reference to the original CFG)

[X] clicking on a cell to highlight all the terms that correspond to it in yellow - BROKE

[ ] a frame inherits the features of the wordFrames it matches to

[X] Pattern tag system

        // VP > Noun[singular] Verb[3PPresent]
        //    <horse takes>
        
        VP > Noun[plural] Verb[simple]
            <horses take>

[ ] post-parse grammar de-binarization

    not only CFG > CNF, but also the reverse

    We must be able to reconstruct a tree of complete CFG frames from a CNF grid
    1. throw out all loose intermediate cnf frames - they did not fully match.

    this will become necessary for good predicate production. consider an 'if this then that' type statement

[ ] add transitive and intransitive verbs
    (can't  think of verbs that can't be made intransitive. I guess that's why "i just was" requires the 'just')

[X] add some type group data structure. perhaps I should start splitting the grammar into multiple text files
    this is in order to make agreement easier to write frames for.

    like
        Noun[Pronoun,singular] Verb[LinkingVerb,singular]
            <i am>, <he is>, <she is> !<she am>
        Noun[Pronoun,plural] Verb[LinkingVerb,plural]
            <we are>, <they are>
        
        with the info
            NUMBER: singular, plural
            PERSON: 1stPerson, 2ndPerson, 3rdPerson
        
        VerbPhrase: Noun[Pronoun,NUMBER,PERSON] Verb[LinkingVerb,NUMBER,PERSON] (-continuous)
            <i am>, <they are>, <she is>, <you are>, <we are>
        
        this requires parse frames to also have features
        NounPhrase:
            Det Noun[NUMBER] -NUMBER
        
        in order for this to work on frames more than three patterns long, the frame-debinarization has to happen.
        For example:
            Noun[NUMBER] 
        
[ ] display the complete contents of a cell you have selected
    S - Sentence
        -Plural -1stPerson

        NounPhrase[singular, determined] VerbPhrase

    subsequent clicks cycle through the different frames in the cell

[ ] the cell you have selected, show a tree for it.

[ ] get highlighting back online

------ brainstorm



how predicates are supposed to look

pigs are animals
birds are animals
birds can fly

animal encompasses pig
animal encompasses bird
bird can fly
animal can eat

?can animal eat? Y
?can bird eat? Y
?can animal fly? N
?can pig fly? N

"pigs are land animals"
"birds are animals"
"birds can fly"

?"can pigs fly"
    NO

"objects can fly if they are thrown"
"animals are objects"
?"can pigs fly"
    SOMETIMES


"cats are animals"

    S [p:issubsetof]

predicate: cat issubsetof animal

"animals can run"

    S [p:habilitative]

predicate: animal can run
    this should prompt the creation of a
    cat can run
 
 "knights fight in battles"
 "kings appoint knights"
 "knights are people"
 "kings are people"
 "adults are people"
 "adults can fight"
 "babies are not adults"
 "babies are people"

    DO_STH_TO_STH person give gift person



Statements made by the deranged:
given predicates:
    CAN_DO horse run                "horses can run"
    HAS_PROPERTY horse fast         "horses are fast"
    IS_SUBSET_OF horse mammal       "horse are mammals"
    IS_SUBSET_OF mammal animal      "mammals are animals"
    IS_INSTANCE_OF charles horse    "charles is a horse"
derived predicates:
    CAN_DO charles run
    HAS_PROPERTY charles fast
    IS_SUBSET_OF horse animal
    IS_INSTANCE_OF charles mammal
    IS_INSTANCE_OF charles animal


ALL_AND
    HAS_PROPERTY horse fast
    IS_SUBSET_OF horse racehorse





"are horses fast"
?HAS_PROPERTY horse fast -> YES

"are horses mammals"
?IS_SUBSET_OF horse mammal -> YES

"is charles fast"
?HAS_PROPERTY charles fast -> YES
    requires inheritance of HAS_PROPERTY

"can charles run"
?CAN_DO chales run -> YES

a Predicate KnowledgeBase can contain any number of predicates.
    it has given predicates displayed in red
    it also has inferred predicates displayed in orange



