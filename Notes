Notes:

[ ] display and operate on nicknames

[ ] implement actual polymorphism for Frames
    Frame
        name
        nickname
    WordFrame : Frame
        type heirarchy
        word
    SyntaxFrame : Frame
        vector<PatternElement> pattern_elements
    ParsedSyntaxFrame : SyntaxFrame
        vector<pair<index, Frame>> matched_frames_by_index
    BinaryFrame : Frame
        PatternElement left
        PatternElement right
        +SyntaxFrame original_syntax_frame
    
    also
    PatternElement
        match_string
    CompletePatternElement : PatternElement
        true_match_type
        Necessity necessity
        vector<FeatureTag> feature_tags

[ ] match patterns on type heirarchy components. like 
    VP > AuxiliaryVerb Verb
       > have taken "i <have taken> to hunting"
    
    VP > Verb MeasureNoun
        >  the horse <drank water>
    
    VP > Pronoun Verb
        > <i eat> food for the taste
    
    NP > Pronoun Noun
        > the king rode upon <his horse>

[ ] actually use pattern necessity type (this will require extra nuances in binarize_grammar - reference to 'higher' production rules, and modification thereof. With maintenence of reference to the original CNF)

[X] clicking on a cell to highligh all the terms that correspond to it in yellow

[ ] a frame inherits the features of the wordFrames it matches to

[X] Pattern tag system

        // VP > Noun[singular] Verb[3PPresent]
        //    <horse takes>
        
        VP > Noun[plural] Verb[simple]
            <horses take>

[ ] post-parse grammar de-binarization

    not only CFG > CNF, but also the reverse

    We must be able to reconstruct a tree of complete CFG frames from a CNF grid




 